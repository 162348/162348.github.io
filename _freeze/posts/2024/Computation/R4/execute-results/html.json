{
  "hash": "ee56b8ca551132d9384594d1a93c921b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R（４）メタプログラミング\"\nsubtitle: \"Expression について\"\nauthor: \"司馬 博文\"\ndate: 6/5/2024\ncategories: [Computation, R]\nbibliography: \n    - ../../../mathematics.bib\n    - ../../../bib.bib\ncsl: ../../../apa.csl\nabstract-title: 概要\nabstract: R は統計計算のための言語です．\nformat:\n  html:\n    code-fold: false\n---\n\n\n## Expression とは\n\nオブジェクト志向言語ではコード自体もオブジェクトであり，これを R では Expression と呼ぶ．\n\n１つのクラスからなるわけではなく，`call`, `symbol`, `constant`, `pairlist` の４つの型からなる．^[[@Wickham2019] [第17章](https://adv-r.hadley.nz/meta-big-picture.html)２節．]\n\n### コンストラクタ\n\n次のような操作ができる^[[@Wickham2019] [第18章](https://adv-r.hadley.nz/expressions.html)]\n\n`rlang::expr` がコンストラクタである：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rlang)\nz <- rlang::expr(y <- x*10)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ny <- x * 10\n```\n\n\n:::\n:::\n\n\n`expression` オブジェクトは `base::eval()` で評価できる：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 4\neval(z)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40\n```\n\n\n:::\n:::\n\n\n### 参照方法\n\n`expression` には list のようにアクセス可能である：^[[@Wickham2019] [第17章](https://adv-r.hadley.nz/meta-big-picture.html)２節．]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- expr(f(x = 1, y = 2))\n\n# Add a new argument\nf$z <- 3\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nf(x = 1, y = 2, z = 3)\n```\n\n\n:::\n\n```{.r .cell-code}\n#> f(x = 1, y = 2, z = 3)\n\n# Or remove an argument:\nf[[2]] <- NULL\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nf(y = 2, z = 3)\n```\n\n\n:::\n\n```{.r .cell-code}\n#> f(y = 2, z = 3)\n```\n:::\n\n\n## メタプログラミング\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncapture_it <- function(x) {\n  expr(x)\n}\ncapture_it(a + b + c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nx\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncapture_it <- function(x) {\n  enexpr(x)\n}\ncapture_it(a + b + c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\na + b + c\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}