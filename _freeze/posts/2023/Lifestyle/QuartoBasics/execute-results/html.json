{
  "hash": "e4976b18429d7c929f73c3cb61fcce76",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Quarto はじめて良かった\"\nauthor: \"司馬博文\"\ndate: \"11/4/2023\"\ndate-modified: \"7/7/2024\"\ncategories: [Lifestyle]\nabstract: Quarto は TeX のような使用感で，数式とコードが併存する文章を書き，１つのソースファイルから PDF, HTML, Word, Reveal.js, PowerPoint などの多様な形式に出力できる次世代の執筆環境である．TeX, RStudio, Jupyter Notebook のいずれかに慣れている人であれば，極めて手軽に Quarto を使うことができる．\nabstract-title: 概要\ntoc: true\nnumber-sections: true\n---\n\n## 使い方の概要\n\n### 導入\n\n本サイトは Quarto と，GitHub Actions によってホスティングされている．\n\nQuarto ではこのような Notebook-like なドキュメントが，極めて簡単に＋凡ゆるフォーマットで作成できる．\n\n特に VSCode の拡張機能と組み合わせれば，RStudio のような隙のない統合開発環境が得られる．^[特に，VSCode では[ビジュアルモードでの編集](https://quarto.org/docs/visual-editor/vscode/)もサポートされており，Jupyter Notebookと全く同じ使用感で始められる．]\n\n基本的な仕組みとして，自分で作成するのは `.qmd`ファイルのみである．\n\nその後は`quarto render`コマンドにより，\n\n::: {.callout-important appearance=\"simple\" icon=\"false\"}\n\n* コードブロックは Jupyter によって処理され，\n* 全体は markdown に変換され，\n* Pandoc によって`pdf`, `html`, `word` など好きな形式に最終出力できる．\n\n:::\n\n拡張機能をオンにした VSCode では`Run Cell`ボタンもあるので，ノートブック全体を毎度ビルドせずとも，コードブロックごとに実行して結果を見ることもできる．\n\n`Ctrl+Enter` で１行ごとに実行できる操作感は `RStudio` と同じである．\n\n### YAML Header\n\n各ファイルの冒頭に YAML block を用意することで，ノートブックの詳細を調整できる（参照：[HTML Options](https://quarto.org/docs/reference/formats/html.html)）．\n\n\n```{YAML}\n---\ntitle: \"Quarto Basics\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n```\n\n\n本文はmarkdown記法で書く．数式も使える：\n$$\\mathrm{P}[|\\xi|<t]\\le2e^{-\\frac{t^2}{2\\sigma^2}},\\qquad t>0.$$\n\nまた，コードブロックにもコメントアウトと接頭辞の組み合わせ`#|`を前につけることでYAMLで指示が出せる（参照：[指示のリスト](https://quarto.org/docs/reference/cells/cells-jupyter.html)）．上のコードブロックには\n\n```yaml\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n```\n\nと追加されているために，出力された図にラベリングとキャプションが付いているのである．\n\n## 美点\n\n* レンダリングがとんでもなく速い．体感でTeXの10分の1である．\n* それでいて数式とコードブロックを併在させることが出来る．なお，明かにTeXを意識していることがわかる使用感になっているし，[本の作成も可能](https://quarto.org/docs/books/)としている．\n* ローカル環境で動く．Jupyter Notebookが続かない筆者にとって，この点は肝要である．\n* 私用の勉強ノートとしても使えると同時に，内容そのままブログとして公開できる．\n* [プレゼンテーションにも使える](https://quarto.org/docs/presentations/)．\n* すごい細かいが，例えば`project type`を`website`としたリポジトリで`quarto render`をしても，不要なファイルが自動で削除される．このような点がライトユーザーでもとにかく使いやすい．\n* さらに[インタラクティブな機能](https://quarto.org/docs/interactive/)を実現してみたい．\n\n## Website Hostingのやり方\n\n[公式Guide](https://quarto.org/docs/publishing/github-pages.html)を参考．\n\n### Source Branchを`main`と別ける\n\nまず`gh-pages`という全く新しいブランチを作成する．既存のリポジトリのコミット履歴とは独立している新しいブランチを作るときは`--orphan`オプションが利用される．\n\n```{.bash filename=\"Terminal\"}\ngit checkout --orphan gh-pages\ngit reset --hard # make sure all changes are committed before running this!\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\ngit checkout main\n```\n\n基本`gh-pages`ブランチには自分では立ち入らない．\n\n### `Publish`コマンドによるサイトの公開\n\n`main`ブランチにいることを確認して，\n```{.bash filename=\"Terminal\"}\nquarto publish gh-pages\n```\nを実行．\n\nGitHubの方の設定**Settings: Pages**で，Sourceを`gh-pages`ブランチの`/(root)`にしていることを確認すれば，これで無事サイトが公開されていることが確認できる．\n\n### GitHub Actionの使用\n\nさらに，ローカル上で`render`するのではなく，コミットする度にGitHub上でレンダリングしてもらえるように自動化することもできる．こうするとスマホからも自分のサイトが更新できる．\n\nまず，GitHubの設定の**Actions**セクションの**Workflow permissions**から，読み書きの権限をGitHub Actionに付与する．\n\n続いて，次の内容のファイルを`.github/workflows/publish.yml`に書き込む：\n\n```{.yml filename=\".github/workflows/publish.yml\"}\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\nこれで，`main`ブランチにコミットする度に，GitHub上で`render`が実行されることとなる．\n\n## PDFの作り方\n\nLuaLaTeXを利用することで日本語を含んだPDFを作成できる．\n\n```{.qmd filename=\"report.qmd\"}\ntitle: \"タイトル\"\nauthor: 司馬博文\ndate: 2023/12/11\nformat:\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\n    include-in-header: \n      - file: ../_preamble.tex\npdf-engine: lualatex\ndocumentclass: ltjsarticle \n```\n\n## スライドの作り方\n\n",
    "supporting": [
      "QuartoBasics_files"
    ],
    "filters": [],
    "includes": {}
  }
}