renv::snapshot()
install.packages("renv")
renv::snapshot()
renv::snapshot()
renv::snapshot()
install.packages("rstan")
install.packages("yuima")
renv::snapshot()
library(rstan)
renv::snapshot()
renv::status()
renv::diagnotics()
renv::diagnostics()
quit()
renv::snapshot()
quit()
renv::snapshot()
library(rstan)
quit()
library(renv)
renv::snapshot()
library(RZigZag)
library(ggplot2)
V <- matrix(c(3,1,1,3),nrow=2)
mu <- c(2,2)
x0 <- c(0,0)
result <- BPSGaussian(V, mu, n_iter = 100, x0 = x0)
ggplot() +
   geom_path(aes(x=result$Positions[1,], y=result$Positions[2,]), color="#2F579C") +
   geom_point(aes(x=result$Positions[1,], y=result$Positions[2,]), color="#2F579C") +
   labs(x="", y="", title="Bouncy Particle Sampler") +
   theme_void() +
   theme(text=element_text(size=12), axis.title=element_text(color="#2F579C"), plot.title=element_text(color="#2F579C"))
result$Positions
write.csv(result$Positions, "positions.csv", row.names=FALSE)
library(RZigZag)
library(ggplot2)
V <- matrix(c(3,1,1,3),nrow=2)
mu <- c(2,2)
x0 <- c(0,0)
result <- BPSGaussian(V, mu, n_iter = 100, x0 = x0)
# CSVファイルに保存するデータフレームを作成
output_df <- data.frame(x = result$Positions[1,], y = result$Positions[2,])
# CSVファイルに保存
write.csv(output_df, file = "bouncy_particle_sampler_result.csv", row.names = FALSE)
ggplot() +
  geom_path(aes(x=result$Positions[1,], y=result$Positions[2,]), color="#2F579C") +
  geom_point(aes(x=result$Positions[1,], y=result$Positions[2,]), color="#2F579C") +
  labs(x="", y="", title="Bouncy Particle Sampler") +
  theme_void() +
  theme(text=element_text(size=12), axis.title=element_text(color="#2F579C"), plot.title=element_text(color="#2F579C"))
library(yuima)
model <- setModel(drift = "theta*(mu-X)", diffusion = "sigma", state.variable = "X")
get.model(model)
summary(model0
)
summary(model)
str(model)
str(model@parameters)
str(model@parameter)
install.packages("bayesplot")
library(rstan)
excode <- "data {
            int N;
            real x[N+1];
            real T;
            real h;
          }
          parameters {
            real<lower=0> theta;
            real<lower=0> mu;
            real<lower=0> sigma;
          }
          model {
            x[1] ~ normal(0,1);
            for(n in 2:(N+1)){
              x[n] ~ normal(x[n-1] + h * theta * (mu - x[n-1]),
                            sqrt(h) * sigma);
            }
          }"
sde_dat <- list(N =  100,
                x = rnorm(101),
                T=1,
                h=0.01)
fit <- stan(model_code=excode, data = sde_dat, iter = 1000, chains = 4)
install.packages("rstanarm")
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("cyl", "drat", "am", "wt"),
           prob = 0.8) + plot_title
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           prob = 0.8) + plot_title
color_scheme_set("red")
ppc_dens_overlay(y = fit$y,
                 yrep = posterior_predict(fit, draws = 50))
summary(fit)
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("cyl", "drat", "am"),
           prob = 0.8) + plot_title
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
library(rstan)
excode <- "data {
            int N;
            real x[N+1];
            real T;
            real h;
          }
          parameters {
            real<lower=0> theta;
            real<lower=0> mu;
            real<lower=0> sigma;
          }
          model {
            x[1] ~ normal(0,1);
            for(n in 2:(N+1)){
              x[n] ~ normal(x[n-1] + h * theta * (mu - x[n-1]),
                            sqrt(h) * sigma);
            }
          }"
sampling <- setSampling(Initial = 0, Terminal = 3, n = 1000)
yuima <- setYuima(model = model, sampling = sampling)
simulation <- simulate(yuima, true.parameter = c(mu = 0,theta = 1, sigma = 0.5), 
                       xinit = 0.02)
sde_dat <- list(N =  yuima@sampling@n,
                  x = as.numeric(sim@data@original.data), 
                  T=yuima@sampling@Terminal,
                  h=yuima@sampling@Terminal/yuima@sampling@n)
fit <- stan(model_code=excode, data = sde_dat, iter = 1000, chains = 4)
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
library(rstan)
excode <- "data {
            int N;
            real x[N+1];
            real T;
            real h;
          }
          parameters {
            real<lower=0> theta;
            real<lower=0> mu;
            real<lower=0> sigma;
          }
          model {
            x[1] ~ normal(0,1);
            for(n in 2:(N+1)){
              x[n] ~ normal(x[n-1] + h * theta * (mu - x[n-1]),
                            sqrt(h) * sigma);
            }
          }"
sampling <- setSampling(Initial = 0, Terminal = 3, n = 1000)
yuima <- setYuima(model = model, sampling = sampling)
simulation <- simulate(yuima, true.parameter = c(mu = 0,theta = 1, sigma = 0.5), 
                       xinit = 0.02)
sde_dat <- list(N =  yuima@sampling@n,
                  x = as.numeric(sim@data@original.data), 
                  T=yuima@sampling@Terminal,
                  h=yuima@sampling@Terminal/yuima@sampling@n)
fit <- stan(model_code=excode, data = sde_dat, iter = 1000, chains = 4)
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
library(rstan)
excode <- "data {
            int N;
            real x[N+1];
            real T;
            real h;
          }
          parameters {
            real<lower=0> theta;
            real<lower=0> mu;
            real<lower=0> sigma;
          }
          model {
            x[1] ~ normal(0,1);
            for(n in 2:(N+1)){
              x[n] ~ normal(x[n-1] + h * theta * (mu - x[n-1]),
                            sqrt(h) * sigma);
            }
          }"
sampling <- setSampling(Initial = 0, Terminal = 3, n = 1000)
yuima <- setYuima(model = model, sampling = sampling)
simulation <- simulate(yuima, true.parameter = c(mu = 0,theta = 1, sigma = 0.5), 
                       xinit = 0.02)
sde_dat <- list(N =  yuima@sampling@n,
                  x = as.numeric(sim@data@original.data), 
                  T=yuima@sampling@Terminal,
                  h=yuima@sampling@Terminal/yuima@sampling@n)
fit <- stan(model_code=excode, data = sde_dat, iter = 1000, chains = 4)
library(rstan)
excode <- "data {
            int N;
            real x[N+1];
            real T;
            real h;
          }
          parameters {
            real<lower=0> theta;
            real<lower=0> mu;
            real<lower=0> sigma;
          }
          model {
            x[1] ~ normal(0,1);
            for(n in 2:(N+1)){
              x[n] ~ normal(x[n-1] + h * theta * (mu - x[n-1]),
                            sqrt(h) * sigma);
            }
          }"
sampling <- setSampling(Initial = 0, Terminal = 3, n = 1000)
yuima <- setYuima(model = model, sampling = sampling)
sim <- simulate(yuima, true.parameter = c(mu = 0,theta = 1, sigma = 0.5), 
                       xinit = 0.02)
sde_dat <- list(N =  yuima@sampling@n,
                  x = as.numeric(sim@data@original.data), 
                  T=yuima@sampling@Terminal,
                  h=yuima@sampling@Terminal/yuima@sampling@n)
fit <- stan(model_code=excode, data = sde_dat, iter = 1000, chains = 4)
# ベイズ推定結果
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
# シミュレーション結果
plot(simulation)
# シミュレーション結果
plot(simulation)
# ベイズ推定結果
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
# ベイズ推定結果
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
summary(fit)
# トレースプロットの表示
traceplot(fit)
stan_hist(fit)
plot(simulation)
# シミュレーション結果
plot(simulation)
# シミュレーション結果
plot(simulation)
# シミュレーション結果
plot(simulation)
# ベイズ推定結果
library("bayesplot")
library("rstanarm")
library("ggplot2")
posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
# シミュレーション結果
plot(simulation)
quit()
install.packages("reticulate")
quit()
library(brms)
?WAIC
q
print(1,)2
print(1,2)
print("A","B")
quit()
install.packages("zoo")
install.packages("expm")
install.packages("cubature")
install.packages("yuima")
install.packages("calculus")
library(calculus)
("a + b" %prod% 1i) %sum% (0 %prod% "c") %diff% (expression(d + e) %div% 3)
typeof(ans)
typeof(.Last.value)
typeof("a+b")
typeof(3)
tyepof(1i)
typeof(1i)
ans = ("a + b" %prod% 1i) %sum% (0 %prod% "c") %diff% (expression(d + e) %div% 3)
class(ans)
mode(ans)
str(ans)
install.packages("deriv")
install.packages("Deriv")
library(Deriv)
simplify(ans)
Simplify(ans)
Simplify("2(x+y)-2y")
Simplify(expression(2(x+y)-2y))
expression(2x+2)
expression(e+f)
x
expression(2e+2)
expression(2f+2)
formula = 2 %prod% ("x" + "y") %diff% (2 %prod% "y")
formula = 2 %prod% ("x" %sum% "y") %diff% (2 %prod% "y")
Simplify(formula)
formula
formula = parse(text="a" %sum% "a")
typeof(formula)
formula
"a" %sum% "a"
x <- array(letters[1:6], dim=c(2,3))
evaluate(x, var=c(a=1, b=2, c=3, d=4, e=5))
var=c(a=1, b=2, c=3, d=4, e=5, f=6)
eval(x)
eval(x,list(var))
eval(x,var)
evaluate(x)
evaluate(x,var=var)
eval(x,list(var))
eval(x,list(a=1))
letters[1:6]
parse(x)
parse(text=x)
parsed_x = parse(text=x)
eval(parsed_x, list(a=1))
eval(parsed_x, list(var))
var
var=c(a=1, b=2, c=3, d=4, e=5, f=6)
var
list(var)
list(a=1,b=2)
eval(parsed_x, list(a=1, b=2, c=3, d=4, e=5, f=6))
parsed_x
print(parsed_x)
evaluated_x <- apply(x, c(1, 2), function(expr) eval(parse(text=expr), envir=var_list))
var_list <- list(a=1, b=2, c=3, d=4, e=5, f=6)
evaluated_x <- apply(x, c(1, 2), function(expr) eval(parse(text=expr), envir=var_list))
evaluated_x
eval(parse(text=x),envir=var_list)
1:2
