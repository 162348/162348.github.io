---
title: "`brms` を用いたベイズロジスティック回帰分析"
subtitle: "BMI データと順序ロジスティック回帰を題材として"
author: "司馬博文"
date: 12/12/2024
date-modified: 12/15/2024
categories: [Bayesian, Statistics, R, Stan]
bibliography: 
    - ../../../assets/mathematics.bib
    - ../../../assets/bib.bib
    - ../../../assets/bib1.bib
csl: ../../../assets/apalike.csl
abstract-title: 概要
abstract: |
    ロジスティック回帰分析は離散的な応答データを扱うことのできる一般化線型モデルである．
    他にも，高度に非線型な関係が予期される場合，ノンパラメトリック手法に移る前の簡単な非線型解析としても活躍する．
    本稿では BMI と LDL の非線型関係に関する探索的手法として，順序ロジスティック回帰分析を実行する．
#     `brms` パッケージは極めて直感的な方法でモデルのフィッティングから事後分布の推論までを実行できる．
# image: Files/DIF.png
code-fold: false
execute:
    cache: true
listing: 
    -   id: lst-survey
        type: grid
        sort: false
        contents:
            - "BDA2.qmd"
            - "BayesRegression.qmd"
            - "BayesGLMM.qmd"
        date-format: iso
        fields: [title,image,date,subtitle]
    -   id: lst-embedding
        type: grid
        grid-columns: 1
        grid-item-align: center
        sort: false
        contents:
            - "../TransDimensionalModels/BayesSelection.qmd"
        date-format: iso
        fields: [title,image,date,subtitle]
    -   id: lst-embedding-nonlinear
        type: grid
        grid-columns: 1
        grid-item-align: center
        sort: false
        contents:
            - "BayesNonparametrics.qmd"
        date-format: iso
        fields: [title,image,date,subtitle]
---

{{< include ../../../assets/_preamble.qmd >}}

## はじめに

多くの社会的なデータは非数値的である．しかしその背後には潜在的な連続変数を想定することが多い．

加えて，線型回帰分析の結果複雑な非線型関係が予期された際，本格的なノンパラメトリック推論に移る前に，離散変数の設定に換言して非線型性を扱いやすくするなど，離散変数を扱う積極的理由もある．

本稿ではロジスティック回帰を主に扱う．

::: {#lst-survey}
:::

```{r}
#| echo: false
#| output: false
path <- "~/Desktop/Mentalism/3-BayesianDataAnalysis/Files/data.xlsx"
library(readxl)
raw_df <- read_excel(path)
library(dplyr)
raw_df <- raw_df %>%
  rename(LAB = LAB_color_100)
library(brms)
library(knitr)
library(gridExtra)
raw_df <- raw_df %>%
  mutate(obesity = case_when(
  BMI < 18.5 ~ 1,  # underweight
  BMI < 25 ~ 2,    # normal
  BMI >= 25 ~ 3    # obese
  ))
```

## 多項ロジスティック回帰

### はじめに

ここでは BMI と LDL コレステロールの関係を見る．

#### BMI と LDL の関係

一般に HDL コレステロールは BMI と正の相関がある（特に[２型糖尿病](https://ja.wikipedia.org/wiki/2型糖尿病)患者では [@Hussai+2019]）．

```{r}
cor(raw_df$BMI, raw_df$HDL)
```

一方で LDL コレステロールと BMI の相関は弱い：

```{r}
cor(raw_df$BMI, raw_df$LDL)
```

しかし全く無関係ではないように見える：

```{r}
boxplot(
  raw_df$LDL ~ raw_df$obesity,
  col = c("pink", "lightgreen", "skyblue"),
  main = "LDL classified by BMI",
  xlab = "BMI",
  ylab = "LDL"
)
```

これは LDL と BMI の関係は非線型性が高く，その非線型関係が男女，さらに年齢で違うためかもしれない [@Li+2021]．

この関係を詳しく見ていくことで何か発見があるかもしれないだろう．

#### LAB

LAB [@Inoue+2010] は酸化変性した LDL のことで，別名超悪玉コレステロールと知られる．LDL コレステロールよりも動脈硬化リスクを（特に残余リスクとして）反映する新しいバイオマーカーになり得ると期待されている [@Okamura+2013]．

LAB と LDL の相関は高くない：

```{r}
cor(raw_df$BMI, raw_df$LAB)
```

```{r}
boxplot(
  raw_df$LAB ~ raw_df$obesity,
  col = c("gray", "pink", "skyblue"),
  main = "LAB classified by BMI",
  xlab = "BMI",
  ylab = "LAB"
)
```

ここでは LAB と LDL の BMI への影響を比較したい．

#### BMI の離散化

BMI と LDL の関数関係は非線型性が予期される [@Li+2021]．

そこで BMI を直接被説明変数とするのではなく，離散化した順序変数 `obesity` を導入する：

```r
raw_df <- raw_df %>%
  mutate(obesity = case_when(
  BMI < 18.5 ~ 1,  # underweight
  BMI < 25 ~ 2,    # normal
  BMI >= 25 ~ 3    # obese
  ))
```

### LDL の予測力

LDL を直接用いて推定すると係数が極めて小さくなるため，対数変換によりスケールを変換して説明変数に入れる：

$$
\P[\texttt{obesity}>1]=g^{-1}(\beta_{\texttt{LDL}}\cdot\log(\texttt{LDL})-c_1)
$$
$$
\P[\texttt{obesity}>2]=g^{-1}(\beta_{\texttt{LDL}}\cdot\log(\texttt{LDL})-c_2)
$$

```{r}
#| output: false
formula_LDL <- bf(
  obesity ~ log(LDL),
  family = cumulative(link = "logit")
)
# prior_LDL <- prior(normal(0,0.1), class = b, coef = "logLDL")
fit_LDL <- brm(
  formula_LDL,
  data = raw_df,
  chains = 4, cores = 4
#  prior = prior_LDL
)
```

```{r}
summary(fit_LDL)
```

LDL が上がるごとに，`normal` や `underweight` から `obese` に移る確率が上がるのが見える．

```{r}
conditional_effects(fit_LDL, "LDL", categorical = TRUE)
```

```{r}
prior_summary(fit_LDL)
```

$c_1,c_2$ には $0$ を中心とした $t$-事前分布が置かれているため，識別性は保たれると考えて良い．

### LAB との比較

実は LDL よりも LAB の方が少し予測力が高い．しかも LAB は $[1,10]$ に値を取るので，対数変換をするよりも平方根変換をする方が自然である：

```{r}
#| output: false
formula_LAB <- bf(
  obesity ~ sqrt(LAB),
  family = cumulative(link = "logit")
)
fit_LAB <- brm(
  formula_LAB,
  data = raw_df,
  chains = 4, cores = 4
)
```

```{r}
loo_compare(loo(fit_LDL), loo(fit_LAB))
```

```{r}
conditional_effects(fit_LAB, "LAB", categorical = TRUE)
```

LAB が上昇すると `underweight`, `normal` から `obese` に移る確率がグンと上がるのが見える．

### 双方の採用

前節で `LAB` と `LDL` を比較すると，前者のみを用いたモデルの方が予測力が高いことを見た．

では両方をモデルに入れてベイズ推論をすることで，２つの情報を統合したより良いモデルができるだろうか？

```{r}
#| output: false
df_double <- data.frame(
  obesity = raw_df$obesity,
  z_sqrt_LAB = scale(sqrt(raw_df$LAB)),
  z_log_LDL = scale(log(raw_df$LDL))
)
formula_double <- bf(
  obesity ~ z_sqrt_LAB + z_log_LDL,
  family = cumulative(link = "logit")
)
fit_double <- brm(
  formula_double,
  data = df_double,
  chains = 4, cores = 4
)
```

実際予測性能の面では両方入れたモデルの方が良いようである：

```{r}
loo_compare(loo(fit_LAB), loo(fit_double))
```

```{r}
plot(fit_double, variable = c("b_z_sqrt_LAB", "b_z_log_LDL"))
```

LDL の方が僅かに縮小されて推定されていることがわかる．

さらには `LAB` と `LDL` がモデルに入っている確率を出す方法は別稿で追求する：

::: {#lst-embedding}
:::

### 交絡の存在

```{r}
#| output: false
formula_double_confound <- bf(
  obesity ~ z_sqrt_LAB * z_log_LDL,
  family = cumulative(link = "logit")
)
fit_double_confound <- brm(
  formula_double_confound,
  data = df_double,
  chains = 4, cores = 4
)
```

```{r}
plot(fit_double_confound, variable = c("b_z_sqrt_LAB", "b_z_log_LDL", "b_z_sqrt_LAB:z_log_LDL"))
```

若干の交絡の存在が疑われる．LDL が大きいほど，LAB と BMI との関係は減少していき，逆もまた然りである．

これは共線型性が強いので当然とも思われる：

```{r}
cor(df_double$z_sqrt_LAB, df_double$z_log_LDL)
```

しかし必ずしも条件数が大きいわけではない．

```{r}
X <- model.matrix(~ z_sqrt_LAB + z_log_LDL, data = df_double)
kappa(X)
```

### 名目モデルを使ってしまったら？

`underweight`, `normal`, `obese` 間の順序構造を無視して，カテゴリカル分布を通じてモデリングをしても，実は当てはまりは必ずしも悪くない．

```{r}
#| output: false
formula_nominal <- bf(
  obesity ~ LAB,
  family = categorical(link = "logit")
)
fit_nominal <- brm(
  formula_nominal,
  data = raw_df,
  chains = 4, cores = 4
)
```

```{r}
waic(fit_LAB)
waic(fit_nominal)
```

ほとんど質的には一致した結果を得る：

```{r}
conditional_effects(fit_nominal, "LAB", categorical = TRUE)
```

ひょっとしたら，BMI を離散化したという点で順序変数に思えるかもしれないが，これは単なる思い込みで，「痩せている」ことと「太っている」ことに順序関係を仮定することはむしろノイズになっているのかもしれない．

<!-- 
```{r}
p1_ppc <- pp_check(fit_nominal, ndraws = 100)
p2_ppc <- pp_check(fit_LAB, ndraws = 100)
grid.arrange(p1_ppc, p2_ppc, nrow = 1)
```
-->

### 非線型関係の追求

::: {#lst-embedding-nonlinear}
:::

### 共変量の追加と効果の観察

```{r}
#| output: false
raw_df$sqrt_LAB <- sqrt(raw_df$LAB)
raw_df$log_Age <- log(raw_df$Age)
formula_LAB_cov <- bf(
  obesity ~ log_Age + SEX + log_Age:SEX + (0 + SEX | sqrt_LAB),
  family = categorical(link = "logit")
)
fit_LAB_cov <- brm(
  formula_LAB_cov,
  data = raw_df,
  chains = 4, cores = 4
)
```

```{r}
summary(fit_LAB_cov)
```

```{r}
conditional_effects(fit_LAB_cov, "SEX", categorical = TRUE)
```

一般に男性の方が太っている確率が高くなる．これはよく知られているようである．

```{r}
conditional_effects(fit_LAB_cov, "log_Age", conditions = list(SEX = "male"), categorical = TRUE)
conditional_effects(fit_LAB_cov, "log_Age", conditions = list(SEX = "female"), categorical = TRUE)
```

女性は年齢とともに太る傾向が見えるが，男性はそうでもない（むしろ逆である）ようである．

そして共変量を追加したことでモデルの予測力が大きく良くなっている：

```{r}
loo_compare(loo(fit_LAB), loo(fit_LAB_cov))
```

```{r}
pp_check(fit_LAB_cov)
```

### その他の共変量の探索

BMI と LDL は，骨ミネラル密度 (BMD: Bone Mineral Density) に因果的な影響を与えることが知られている [@Wu+2024]．

`P1NP` は骨形成マーカー，`ALP` は骨の形成や骨疾患の評価に役立つ酵素である．

`deoxypyridinolin` (DPD) は骨を構成するⅠ型コラーゲンを束ねる蛋白質で、骨吸収の指標になる．

他に `Ca`, `Mg` などの値もある．

## 階層ロジットモデル

### はじめに

データの不均衡性に着想を得て，「太っているかいないか？」の後に「痩せ気味かどうか？」という２つのロジット回帰の連続とみることを考える．

```{r}
#| output: false
#| eval: false
raw_df <- raw_df %>%
  mutate(obesity_former = case_when(
  BMI < 25 ~ 0,    # normal
  BMI >= 25 ~ 1    # obese
  ))
raw_df <- raw_df %>%
  mutate(obesity_latter = case_when(
  BMI < 18.5 ~ 0,    # underweight
  BMI >= 18.5 ~ 1    # normal
  ))
```

```{r}
#| output: false
#| eval: false
formula_former <- bf(
  obesity_former ~ LAB,
  family = bernoulli(link = "logit")
)
fit_former <- brm(
  formula_former,
  data = raw_df,
  chains = 4, cores = 4
)
formula_latter <- bf(
  obesity_latter ~ LAB,
  family = bernoulli(link = "logit")
)
fit_latter <- brm(
  formula_latter,
  data = raw_df,
  chains = 4, cores = 4
)
```
