---
title: "フローベースモデル"
subtitle: "シミュレーションなしの拡散モデルとしての連続正則化流"
author: "司馬 博文"
date: 2/14/2024
date-modified: 8/10/2024
categories: [Deep, Sampling]
bibliography: 
    - ../../../assets/mathematics.bib
    - ../../../assets/bib.bib
    - ../../../assets/bib1.bib
csl: ../../../assets/apalike.csl
abstract-title: 概要
abstract: 確率分布を Gauss 潜在変数の非線型な押し出しとしてモデリングする．この押し出しを深層ニューラルネットワークでモデリングすれば，豊かな表現力が得られる．加えて，このニューラルネットワークを可逆に設計すれば，このモデルの尤度も評価することが出来る．
listing: 
    -   id: flow-listing
        type: grid
        sort: false
        contents:
            - "NF.qmd"
            - "NF2.qmd"
            - "Diffusion.qmd"
        date-format: iso
        fields: [title,image,date,subtitle]
---

{{< include ../../../assets/_preamble.qmd >}}

::: {#flow-listing}
:::

## 連続時間極限 (CNF) {#sec-CNF}

### 導入

フロー $(x_t)$ は，あるベクトル場 $F:\R^d\times[0,T]\to\R^d$ に関して ODE
$$
\dd{x_t}{t}=F(x_t,t)
$$
を満たすとし，適切な $F$ をニューラルネットによって学習する．

学習した $F$ に対しては，Euler の方法により $(x_t)$ を計算できる：
$$
x_{t+\ep}=x_t+\ep F(x_t,t).
$$

さらにフロー $(f_t)$ の Jacobian が必要であるが，これは
$$
\dd{L}{t}(t)=\Tr\Paren{J_{F_t}(x_t)},\qquad L(t):=\log\abs{\det J(f_t)(x_0)}
$$
を利用することで，$L$ の微分関数として得ることができる．

こうして，$(x_t)$ のシミュレーションと $(f_t)$ の Jacobian の計算が，いずれも ODE の数値解を求めることに帰着された．

### Neural ODE [@Chen+2018]



### FFJORD [@Grathwohl+2019]

この方法では，$\Tr(J_{F_t}(x_t))$ の計算に Hutchinson の跡推定量を用いる．これにより計算は加速されるというのである．

### フローマッチング [@Lipman+2023]

フローマッチング [@Lipman+2023], rectified flow [@Liu+2023-Flow]

## 確率的補間

[@Albergo-Vanden-Eijnden2023] により提案されたもので，SiT (Scalable Interpolant Transformer) [@Ma+2024] でも用いられている技術である．

[@Albergo+2023]