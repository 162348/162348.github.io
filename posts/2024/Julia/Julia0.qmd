---
title: "俺のための Julia 入門０"
subtitle: "数値計算への新たな接近"
author: "司馬 博文"
date: 9/5/2020
categories: [Julia, 俺のためのJulia入門]
abstract-title: 概要
abstract: Julia はスクリプト言語とコンパイル言語の良いとこどりを目指して開発された言語である．特に，Matlab のような数学的な記述ができ，C のような実行速度を保ち，Python のような汎用性を持ち，Shell のようなモジュール性を持つ．
format:
    html:
        code-fold: false
execute:
    cache: true
---

{{< include ../../../_preamble.qmd >}}

## Julia のすすめ

::: {.callout-tip appearance="simple" icon="false" title="リンク集"}
* [Julia Documentation](https://docs.julialang.org/en/v1/)
* [Julia Discourse](https://discourse.julialang.org/)
* [Julia Forem](https://forem.julialang.org/)
:::

### Quarto で始める Julia

Quarto は Jupyter を通じて，Pytho, R だけでなく Julia もサポートしている．^[[Quarto -- Using Julia](https://quarto.org/docs/computations/julia.html)]

```{julia}
#| label: fig-parametric
#| fig-cap: "Parametric Plots"

using Plots

plot(sin, 
    x->sin(2x), 
    0, 
    2π, 
    leg=false, 
    fill=(0,:lavender))
```

### [インストール](https://quarto.org/docs/computations/julia.html#installation)

1. まずは [Julia をインストール](https://julialang.org/downloads/)
    
    ```bash
    curl -fsSL https://install.julialang.org | sh
    ```

    すると，`julia` コマンドで対話的セッションを開始できる．これを Julia では **REPL** (**Read-Eval-Print Loop**) と呼ぶ．
2. 続いて，Quarto で `julia` ブロックを動かすには，`IJulia` パッケージをインストールする．次を REPL で実行する：

    ```julia
    using Pkg
    Pkg.add("IJulia")
    using IJulia
    notebook()
    ```

    これで，Jupyter Notebook で Julia を使うことができる．^[Jupyter Notebook をインストールしていない場合，`install Jupyter via Conda, y/n? [y]: n` の確認がなされる．これに `y` で応えると，`Conda.jl` パッケージを通じて，`Miniconda` から最小限の Jupyter 環境がインストールされ，グローバル環境は変わらない．]
3. [`Revise.jl`](https://timholy.github.io/Revise.jl/stable/) も追加すると，Julia セッションを再起動するためが省ける

    ```julia
    using Pkg
    Pkg.add("Revise")
    ```
4. Jupyter Cache も追加すると，ソースが変わらない限りその出力がキャッシュされ，再実行が控えられる．

    ```julia
    using Conda
    Conda.add("jupyter-cache")
    ```

```{=html}
<a class="embedly-card" href="https://docs.julialang.org/en/v1/manual/getting-started/">Getting Started</a><script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>
```

### アップデート

```julia
juliaup update
```

その後，
```julia
jupyter kernelspec list
```
で表示されるカーネルもアップデートする必要がある．

```julia
using IJulia
installkernel("Julia")
```

### パッケージ管理

Julia は独自のパッケージ管理システムを持っている．`]` キーでパッケージモードに入り，`add` でパッケージを追加する．

```julia
(@v1.10) pkg> status
```

でパッケージの情報が表示される．

```julia
(@v1.10) pkg> up
```

でアップデートが可能である．

## 概要

### 基本文法

* indexing は`1`から．
* `[]`の用法は２つ
    * concatenation
    * indexing
* `:`の用法
    * slicing

### クラス構造

::: {.callout-tip appearance="simple" icon="false"}
* 組み込み型，組み込み関数はいずれも`Base`クラスに属する．
:::

### 歴史

Julia は [Why We Created Julia](https://julialang.org/blog/2012/02/why-we-created-julia/) の文書と共に，2/14/2012 に公開された．

論文 [@Bezanson+2017] も発表されて後，2018 年にはバージョン 1.0 がリリースされた．

現在，12/26/2023 以来，`v1.10.0` がリリースされている．

### Read-Eval-Print Loop

* Ctrl+Dかexit()で終了
* ans
    * 直近のevaluated termは変数ansに格納されて居る．
* ５つのモードがある．
    1. Juliaモード
    2. help：?で発動．backspaceで戻る．使いやすい！どうやって実装したんだ？
    3. package：]で発動．標準ではGitHubのGeneral repositoryに登録されて居るpackageがインストール可能．
    4. shell：;で発動
    5. search

Juliaコマンドのオプション
* —project=@.
    * 現在のディレクトリ.にあるProject.tomlによるプロジェクトを有効化する，有効化して実行する．
    * PERLにおけるactivateコマンドの代わり．
    * —projectだけでもいい．
    * 環境変数JULIA_PROJECTを@.にしてもいい．

数学的表示

* law texを打ってtabを押すと処理される！？！？！？！？
    * だからあのときUnicode記号を直打ちしても処理されたのか．aliasされている！？
    * 見た目にも配慮されている．それがJulia．
    * これが祈りか．凄すぎる．やっぱ時代はこっちだ．
* これと合わせ，変数名にはUnicodeが許される．
    * ÷, ^などの使用が直感的に行える．
* 変数の前に数値をつけると暗黙に乗算と解釈する．


## パッケージリスト

`]`で package mode に入る．

```julia
pkg> add <package name>  # 追加
using <filename without extension>  # 使用
help  # 使用可能なコマンドの一覧
```
* `st` (= `status`の alias)
    * 現在のプロジェクトがどの config file によるかの確認
        * デフォルトは `Status ~/.julia/environments/v1.5/Project.toml`
        * こういうデフォルトプロジェクトはユーザー固有になる（ホームディレクトリの下にあるから）
    * 現在インストールされている外部パッケージの状態
* `rm` (= `remove`の alias)
    * install した package を消去する
* `up` (= `update`の alias)
    * 引数無しで用いると，install している全ての package の更新
* `gc` (garbage collection)
    * package の追加・削除・消去を繰り返すと不要なデータが蓄積するらしい．これを自動的に削除してくれる．

### プロット

#### `Plots`

* 
* Soss

### `Soss`：確率的プログラミング

### 数値実験^[to reproduce [weakly informative resampling codes](https://github.com/mvihola/weakly-informative-resampling-codes)]

#### `JLD2`：数値実験の結果を保存

#### `LaTeXStrings`：LaTeX 文字列を扱う

### DownloadしたPackageのリスト
standard library = built-in packagesであるが，Base以外は，addして依存パッケージとして逐一追加する必要がある．これがprojectという観念である．

* Pkg.jl
    * JuliaのPackage managerはこのdocumantationを見る．
* IJulia.jl
    * Jupyter NotebookをJuliaで使う
    * Jupyter Notebookは，ウェブブラウザで動作するプログラムの対話型実行環境で，Julia, Python, R, Rubyなどの言語に対応して居る．Jupyter Notebookでは，ノートブックと呼ばれるドキュメントを作成し，その中でプログラムの記述と実行，メモの作成，保存と共有などを行うことができる．
using IJulia
notebook()
    * condaのJupyter Notebookを使うのか？
* Pluto.jl
    * ] add Pluto
    * julia> import Pluto
    * julia> Pluto.run(1234)
    * で，ブラウザ上でコードする．
* Images.jl
    * using Imagesobject name = load(filename::AbstractString)
* FileIO.jl
    * high-level support for formatted filesの関数loadとsaveの２つを提供する．
* JDF2.jl
    * Julia objectの保存．
* HDF5
    * 大規模改装データの保存用フォーマット（科学技術界の標準）．JDF2はこのサブセット．
* JSON.jl
* DataStructure.jl
    * ヒープや優先度付きキューなどの，直積の上に構造をのせたデータ型
* Atom
    * なんかJuliaとAtom相性いいんだよなぁ．
* Juno
* QuartzImageIO
    * 画像ファイルのIOするときに必要だった記憶
* Distributions

Package management
Config fileとしてはTOML形式を採用している．可読性も高い．
* ディクショナリ構造に明確にマッピングされるように設計されている
* Tom's Obvious, Minimal Language
* TOMLの構文は、大部分がキーと値の組
    1. key = "value"
    3. [テーブル名]
    4. # コメント
* の3種類からなる。 

* Project.toml
    * 現在のProjectが依存しているpackageを管理する．
        * packageとしてダウンロードしたdirectoryにあるProject.tomlを読んで，依存パッケージもダウンロードするようになっている．
    * プロジェクト自体のメタデータや依存パッケージの一覧が収められているテーブル．
    * 開発者も書き足せる．
        * project名など．
    * [deps] テーブルには，(package名) = “UUID”が納められている．
        * こういうのは人間が書くものではない．UUID複雑．これをするのがAdd commandの実装に他ならない．
* Manifest.toml
    * 実際にJuliaの実行時に使うべきパッケージの正確なversionやインストール場所を管理するテーブル．
    * このファイルは，package manegerがProject.tomlを参照しながら依存解決して生成する．

pkg管理モードのコマンド
* activate .
    * >  Activating environment at `~/tmp/myproject/Project.toml`
    * Project.tomlを読み込んで，新たなプロジェクトを実行する．
    * Prompt名が新たなプロジェクト名に更新される．
    * installされているpackageも刷新される．
        * これはうまくできているなぁ！
    * REPLじゃない時は—project=@.オプションでjuliaから実行する．

Package作成

Julia packageに必要な要素は次のとおり．
* README.md
* LICENSE
* Project.toml
* src
    * source code
    * Package名と同じ名前の.jlファイル．
* test
    * test code
* docs
    * documentation
* deps
    * パッケージの依存ライブラリやビルドスクリプトを収める
    * 継続的インテグレーションのための設定ファイル
＊Manifest.tomlは開発環境に特異的で，バージョン管理ツール(GitHub)で共有しないのが一般的．

pkg管理モードのコマンド
* generate MyPackage
    * MyPackageディレクトリを作り，その中にProject.tomlとsrc/MyPackage.jlを作る．
    * Project.tomlには，UUIDを毎回ランダムに生成し，versionやnameやauthorが登録される．
* こうしてつくったMyPackageはすぐにusing MyPackageとMyPackage.greet()で呼べる．

