---
title: "俺のための Julia 入門（２）制御"
author: "司馬 博文"
date: 9/7/2020
categories: [Julia, 俺のためのJulia入門]
abstract-title: 概要
abstract: Julia は 2012 年に公開された科学計算向きの動的型付け言語である．
format:
    html:
        code-fold: false
execute:
    cache: true
---

{{< include ../../../_preamble.qmd >}}

## 概要

::: {.callout-tip appearance="simple" icon="false" title="６つの制御機能^[[Julia Manual](https://docs.julialang.org/en/v1/manual/control-flow/)]"}

1. 複合表現
:::

### scope 内での注意

`while`, `for` block 内で global 変数を参照するときは自由でいいが，編集する際は
```julia
global i += 1
```
などとする必要がある．

一方で，`if`-`elseif`-`else`-`end`ブロックでは local scope は導入されない．

## 複合表現

複数の subexpression を順に評価し，最後の subexpression の値を返す expression を compound expression という．

### `begin`-`end`ブロック

```{julia}
z = begin
    x = 1
    y = 2
    x + y
end
```

### `;`演算子

```{julia}
    z = (x = 1; y = 2; x + y)
```

## 条件評価

条件評価では，条件が一致する場合のみ subexpression の評価が行われ，最後に評価された subexpression の値が返される．

### `if`-`elseif`-`else`-`end`ブロック

```{julia}
x = 1; y = 2

if x < y
    println("x is less than y")
elseif x > y
    println("x is greater than y")
else
    println("x is equal to y")
end
```

::: {.callout-important title="注" collapse="true" icon="false"}
```{julia}
#| error: true
if 1
    println("true")
end
```
:::

### `?,:`演算子

`a ? b : c`とした場合，`a`が`true`なら`b`を，`false`なら`c`を評価した結果を返す．

```{julia}
println(x < y ? "x is less than y" : "x is greater than or equal to y")
```

## 短絡評価

1. 短絡評価される演算子&&, ||を利用する．
a && b
aがtrueならばbを実行する．そうでないならfalseが返る．
例： n ≥ 0 && error(“n must be negative”)

## ループ

1. while block
while condition
	suite
end
2. for block
for condition
	suite
end
* conditionの書き方は，Range型objectを用いる．
    1. i=1:5
    2. i in 1:5

## 例外処理

1. try [/ catch / finally]：try内のsuiteを処理している間に例外が生じたら，中断してcatchに移る．この２つが全て終わるとfinallyをやる．
try
	suite
catch
	suite	#例外処理．失敗した場合の後始末．
finally
	suite	#ファイルを閉じるなど．
end
