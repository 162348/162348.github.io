---
title: "Julia による MCMC サンプリング"
subtitle: "新時代の確率的プログラミング環境の構築に向けて"
author: "司馬 博文"
date: 7/3/2024
categories: [Process, Sampling, Julia, MCMC, 俺のためのJulia入門]
image: MCMCChains.svg
bibliography: 
    - ../../../assets/mathematics.bib
    - ../../../assets/bib.bib
csl: ../../../assets/apalike.csl
abstract-title: 概要
abstract: Julia に存在する MCMC 関連のパッケージをまとめ，多くの MCMC のパッケージを支える，Turing ecosystem の基盤となる抽象的なフレームワーク `MCMCChains` と `AbstractMCMC` を概観する．
code-fold: false
execute:
    cache: true
listing: 
  -   id: lst-Julia
      type: grid
      sort: false
      contents:
          - MALAwithJulia.qmd
          - HMCwithJulia.qmd
          - Julia0.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
---

{{< include ../../../assets/_preamble.qmd >}}

## 導入

具体的なサンプラーは次の稿も参照：

::: {#lst-Julia}
:::

### 依存パッケージ一覧

* `AbstractMCMC.jl` ([GitHub](https://github.com/TuringLang/AbstractMCMC.jl) / [Juliapackages](https://juliapackages.com/p/abstractmcmc) / [HP](https://turinglang.org/AbstractMCMC.jl/dev/)) は MCMC サンプリングのための抽象的なインターフェースを提供するパッケージ．後述の `Turing.jl` エコシステムの基盤となる．

* `LogDensityProblems.jl`：対数密度を扱うフレームワーク．

### MCMC パッケージ一覧

* `AdaptiveMCMC.jl` ([Juliapackages](https://juliapackages.com/p/adaptivemcmc) / [Docs](https://mvihola.github.io/docs/AdaptiveMCMC.jl/)) は適応的な乱歩 MH アルゴリズムを提供するパッケージ．
  * 関連に `AdaptiveParticleMCMC.jl` ([GitHub](https://github.com/mvihola/AdaptiveParticleMCMC.jl)) がある．これは `SequentialMonteCarlo.jl` ([GitHub](https://github.com/awllee/SequentialMonteCarlo.jl)) に基づいている．
* `Mamba.jl` ([Docs](https://mambajl.readthedocs.io/en/latest/) / [GitHub](https://github.com/brian-j-smith/Mamba.jl)) Markov chain Monte Carlo (MCMC) for Bayesian analysis in julia
* `KissMCMC` ([Juliapackages](https://juliapackages.com/p/kissmcmc) / [GitHub](https://github.com/mauro3/KissMCMC.jl)) は 'Keep it simple, stupid, MCMC' ということで，計量な MCMC を提供するパッケージ．

* `DynamicHMC.jl` ([GitHub](https://github.com/tpapp/DynamicHMC.jl)) は NUTS サンプラーを提供するパッケージ．Tamás K. Papp による．
* `SGMCMC.jl` ([GitHub](https://github.com/BigBayes/SGMCMC.jl)) は Oxford CSML チームによる，Bayesian deep learning に向けたサンプラーを提供するパッケージ．

### 連続時間 MCMC パッケージ一覧

::: {.callout-tip appearance="simple" icon="false" title="連続時間 MCMC"}

* `ZigZagBoomerang.jl` ([GitHub](https://github.com/mschauer/ZigZagBoomerang.jl) / [Juliapackages](https://juliapackages.com/p/zigzagboomerang))

* `PDMP.jl` ([GitHub](https://github.com/alan-turing-institute/PDSampler.jl/tree/a3b42258a4eb32fc6e266fe1e44dd04edde4168d) / [Docs](https://alan-turing-institute.github.io/PDSampler.jl/v0.6/)) は 2018 年まで Alan Turing Institute によって開発されていたパッケージ．

* `PiecewiseDeterministicMarkovProcesses.jl` ([GitHub](https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl) / [Docs](https://rveltz.github.io/PiecewiseDeterministicMarkovProcesses.jl/latest/) / [@Veltz2015] / [HP of Dr. Veltz](http://romainveltz.pythonanywhere.com/pdmp-in-julia/) / [Discource](https://discourse.julialang.org/t/new-package-for-piecewise-deterministic-markov-processes/18311)) は細胞生物学におけるモデリング手法としての PDMP を提供するパッケージである．

:::

### 確率的プログラミング

代表的なものは次の２つである：

::: {.callout-tip appearance="simple" icon="false" title="ベイズ推論のためのパッケージ"}

* `Turing.jl` ([HP](https://turinglang.org/) / [GitHub](https://github.com/TuringLang/Turing.jl) / [Juliapackages](https://juliapackages.com/p/turing) / [@Ge+2018])
* `Soss.jl` ([GitHub](https://github.com/cscherrer/Soss.jl) / [Docs](https://cscherrer.github.io/Soss.jl/stable/))

:::

ただし，現状の `Soss.jl` v0.21.2 (6/22/2022) は `FillArrays` のバージョンを `0.13.11` 以下に制限してしまうため（最新は `1.11.0`），これが `Turing.jl` の最新バージョン v0.33.1 と衝突してしまう．

インストールは１つの環境にどちらか１つのみにすることが推奨される．

### Turing ecosystem

::: {.callout-tip appearance="simple" icon="false" title="Turing ecosystem 一覧"}

* `AdvancedPS` ([GitHub](https://github.com/TuringLang/AdvancedPS.jl) / [Docs](https://turinglang.org/AdvancedPS.jl/dev/)) は `Turing.jl` による粒子フィルターベースのサンプラーを提供するパッケージ．
* `AdvancedHMC` ([GitHub](https://github.com/TuringLang/AdvancedHMC.jl))
* `AdvancedMH` ([GitHub](https://github.com/TuringLang/AdvancedMH.jl))
* `AdvancedVI` ([GitHub](https://github.com/TuringLang/AdvancedVI.jl)) 変分推論を提供するパッケージ．
* `Bijectors.jl` ([GitHub](https://github.com/TuringLang/Bijectors.jl)) 正規化流などによる分布の変換を提供するパッケージ．

:::

[@Storopoli2021] も参照．

## `AbstractMCMC.jl` の枠組み

`AbstractMCMC.jl` は，DensityProblem をはじめとした `AbstractModel` と `AbstractSampler` のデータ構造を提供する，Turing エコシステムの根幹部分を支えるパッケージである．

### `LogDensityProblem`

`AbstractMCMC.jl` は，Tamás K. Papp による `LogDensityProblem.jl` の [wrapper](https://turinglang.org/AbstractMCMC.jl/dev/api/) を提供している．

[`sample` 関数](https://turinglang.org/AbstractMCMC.jl/dev/api/#Sampling-a-single-chain)なども，AbstractModel の他に，longdensity オブジェクトに対するメソッドも定義されている．

## `MCMCChains.jl` と `AbstractMCMC.jl`

Turing によるエコシステムは，この MCMC のデザインパターンを利用している．

```{julia}
using MCMCChains
using StatsPlots

# Define the experiment
n_iter = 100
n_name = 3
n_chain = 2

# experiment results
val = randn(n_iter, n_name, n_chain) .+ [1, 2, 3]'
val = hcat(val, rand(1:2, n_iter, 1, n_chain))

# construct a Chains object
chn = Chains(val, [:A, :B, :C, :D])

# visualize the MCMC simulation results
plot(chn; size=(840, 600))
```

### [`sample` 関数]()

`sample` 関数は，[MCMCCahins での実装](https://github.com/TuringLang/MCMCChains.jl/blob/7dc333819128264902abd111e25091bd7947a4f3/src/sampling.jl) と [AbstractMCMC での実装](https://github.com/TuringLang/AbstractMCMC.jl/blob/3cb36f4837643a11318eb889fa0aa74075559db7/src/sample.jl) との２つがある．

#### 使い方

`AbstractModel` に対するデフォルトは次のように始まる：

```julia
function mcmcsample(
    rng::Random.AbstractRNG,
    model::AbstractModel,
    sampler::AbstractSampler,
    N::Integer;
    progress=PROGRESS[],
    progressname="Sampling",
    callback=nothing,
    discard_initial=0,
    thinning=1,
    chain_type::Type=Any,
    initial_state=nothing,
    kwargs...,
)
```

`inisital_params` を指定した場合：

```julia
function mcmcsample(
    rng::Random.AbstractRNG,
    model::AbstractModel,
    sampler::AbstractSampler,
    ::MCMCThreads,
    N::Integer,
    nchains::Integer;
    progress=PROGRESS[],
    progressname="Sampling ($(min(nchains, Threads.nthreads())) threads)",
    initial_params=nothing,
    initial_state=nothing,
    kwargs...,
)
```

### [`autocor` 関数](https://github.com/TuringLang/MCMCChains.jl/blob/5f8e591ad3a9c6e8af01732d8a421cff306434c1/src/stats.jl)

`Chains` オブジェクトに対する `autocor` 関数が，次のように定義されている：

```julia
function autocor(
    chains::Chains;
    append_chains = true,
    demean::Bool = true,
    lags::AbstractVector{<:Integer} = _default_lags(chains, append_chains),
    kwargs...
)
    funs = Function[]
    func_names = @. Symbol("lag ", lags)
    for i in lags
        push!(funs, x -> autocor(x, [i], demean=demean)[1])
    end

    return summarize(
        chains, funs...;
        func_names = func_names,
        append_chains = append_chains,
        name = "Autocorrelation",
        kwargs...
    )
end
```