---
title: "SDE のベイズ推定入門"
subtitle: "YUIMA と Stan を用いた確率過程のベイズ推定入門"
author: "司馬博文"
date: 5/12/2024
date-modified: 3/28/2025
categories: [Process, MCMC, R, Stan, YUIMA, Bayesian]
bibliography: 
    - ../../../assets/2023.bib
    - ../../../assets/2024.bib
    - ../../../assets/2025.bib
csl: ../../../assets/apalike.csl
image: Files/adastan1.png
abstract-title: 概要
abstract: R パッケージ YUIMA を用いた SDE のベイズ推定に，バックエンドとして Stan による HMC の実装を用いる方法を模索する．Stan は C++ を用いる独立した確率プログラミング言語で移植性は高いが，それ故 YUIMA からこれを用いる際に，専用のインターフェイスを考える必要が生じる．
code-fold: false
execute:
  cache: true
listing: 
  -   id: lst-adaStan
      type: grid
      sort: false
      contents:
          - YUIMA.qmd
          - Stan1.qmd
          - Stan2.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
  -   id: lst-stan
      type: grid
      sort: false
      contents:
          - Stan1.qmd
          - Stan2.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
  -   id: lst-stan2
      type: grid
      image-height: 100%
      grid-columns: 1
      contents:
          - Stan2.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
  -   id: lst-R4
      type: grid
      image-height: 100%
      sort: false
      grid-columns: 1
      contents:
          - R4.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
  -   id: lst-brms
      type: grid
      image-height: 100%
      grid-columns: 1
      sort: false
      contents:
          - ../Computation/brms.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
  -   id: lst-yuima
      sort: false
      type: grid
      contents:
          - YUIMA.qmd
          - YUIMA1.qmd
          - YUIMA2.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
---

{{< include ../../../assets/_preamble.qmd >}}

R の YUIMA パッケージに関する詳細は，次の記事も参照：

::: {#lst-adaStan}
:::

## 問題提起

確率過程の統計推測を行うための R パッケージ `yuima` では多次元の SDE
$$
dX_t=b_t^\theta(X_t)\,dt+\sigma_t^\phi(X_t)\,dW_t,\qquad X_0\in\R^d,
$$
に対してパラメータ $\theta\in\R^{d_\theta},\phi\in\R^{d_\phi}$ の推定を実行することができる（[`YUIMA` の記事](YUIMA.qmd#sec-model-constructor) も参照）．

::: {#lst-yuima}
:::

YUIMA におけるパラメータ $\theta,\varphi$ の推定には，`qmle()` による擬似最尤推定量を用いることだけでなく，[`adaBayes()`](https://github.com/yuimaproject/yuima/blob/main/R/adaBayes.R) を通じて，一般化ベイズによる事後平均推定を実行することも可能である．

現状の `adaBayes()` 関数では，自前のランダムウォーク MH アルゴリズムや p-CN アルゴリズムを用いているが，HMC (Hamiltonian Monte Carlo) [@Duane+1987], [@Neal1996] も利用可能なように拡張することを考えたい．

ここでは新たな関数 `adaStan()` を定義することを考える．

## 最終的なコード {#sec-final-form}

[`adaStan.R`](adaStan.R) を参照．

```{r}
#| output: false
source("adaStan.R")

model <- setModel(drift = "theta*(mu-x)", diffusion = "sigma", state.variable = "x", solve.variable = "x")
sampling <- setSampling(Initial = 0, Terminal = 3, n = 1000)
yuima <- setYuima(model = model, sampling = sampling)
simulation <- simulate(yuima, true.parameter = c(theta = 1, mu = 0, sigma = 0.5), xinit = rnorm(1))

fit <- adaStan(simulation, iter=2000, rstan=FALSE)
```

```{r}
fit$summary()
mcmc_hist(fit$draws("theta"))
```

面白い！事後分布は２峰性をもっており，2000 回繰り返すと事後平均はかろうじて正解に近づいている．


## 背景

### 確率的プログラミング言語 `Stan` との連携

`Stan` は Hamiltonian Monte Carlo 法を用いた事後分布サンプリングを，確率モデルを定義するだけで実行することができる言語である．

加えて，バックグラウンドで C++ を用いているため，非常に高速な MCMC 計算が可能である．

確率的プログラミング言語 Stan については次の記事も参照：

::: {#lst-stan}
:::

`RStan` は確率的プログラミング言語 Stan とのインターフェイスを提供する R パッケージであり，これを用いることで R からでも Stan を通じた HMC を用いた事後分布からのサンプリングが実行できる．

ここでは YUIMA の `adaBayes()` 関数と同じ推定を，内部で Stan を用いて実行する関数 `adaStan()` の実装を試みる．

### アイデアのスケッチ {#sec-adaStan}

具体的には，R において次のような関数を定義することになるだろう．

必ずしもベストな方法ではないかもしれないが，まずは `RStan` を用いてスケッチをしてみる．改良版は第 [-@sec-final-form] 節参照．

```{r}
#| output: false
library(yuima)
library(rstan)

yuima_to_stan <- function(yuima){  # <1>
  excode <- 'data {\n  int N;\n  vector[N+1] x;\n  real T;\n  real h;\n}
parameters {\n'

  for(i in 1:length(yuima@model@parameter@all)){  # <2>
    excode <- paste(excode, " real", yuima@model@parameter@all[i], ";\n")
  }

  excode <- paste(excode,"\n}")  # <3>

  excode <- paste(excode,'\nmodel {\n  x[1] ~ normal(0,1);\n  for(n in 2:(N+1)){')  # <4>

  excode <- paste(excode,
    "\n  x[n] ~ normal(x[n-1] + h *", gsub("x", "x[n-1]", yuima@model@drift), ",sqrt(h) *", gsub("x", "x[n-1]", yuima@model@diffusion[[1]]),");\n  }")  # <5>

  excode <- paste(excode,'\n}\n')
}

adaStan <- function(yuima){  # <6>
  excode <- yuima_to_stan(yuima)

  sde_dat <- list(N =  yuima@sampling@n,  # <7>
    x = as.numeric(yuima@data@original.data), 
    T=yuima@sampling@Terminal,
    h=yuima@sampling@Terminal/yuima@sampling@n)

  fit <- stan(model_code=excode,
    data = sde_dat, 
    iter = 1000,
    chains = 4)  # <8>

  return(fit)
}
```

1. Stan モデルのコード（パラメータ部分は未定）を文字列として `excode` 変数に格納する．
2. ここからが `adaStan` 関数の本体である．Yuima モデルの全てのパラメータについてループを開始して，`excode` にパラメータの宣言を追加していく．
3. ここでついに Stan モデルのパラメータの定義部分が完成する．
4. 最後はモデルの定義部分を追加して，Stan モデルのコードが完成する．最初の観測値 `x[1]` は $\rN(0,1)$ に従う．
5. それ以降の観測値 `x[n]` は，前の観測値 `x[n-1]` に drift 項と diffusion 項を加えたものに従う．これを実装するために，Yuima モデルの drift 項と diffusion 項の定義文を呼び出し，`x` を `x[n-1]` に置換することで Stan モデルのコードに埋め込む．
6. `adaStan` という関数を定義する．この関数は，Yuima パッケージのオブジェクトを引数として受け取り，Stan での推定を行い，その結果を `fit` オブジェクトとして返す．
7. Stan での推定を実行するために，Yuima モデルのデータを Stan モデルに渡すためのリスト `sde_dat` を作成する．
8. 最後に Stan モデルをコンパイルして実行し，結果を `fit` オブジェクトとして返す．

`yuima` オブジェクトのスロットの存在のチェックや変数名 `x` の表記揺れなど，細かな問題も多いだろうが，本記事では殊に Stan との接続においてより良い方法を模索したい．

::: {.callout-caution title="問題点"}

関数内部で Stan コードを文字列として生成していることがダサい．

より良いコードオブジェクトの取り扱い方や，Stan とのより安全で効率的なインターフェイスを模索したい．

:::

Stan を使う以上，どこかで Stan モデルの情報を受け渡すことは必要になるが，できることならばもっと良い方法を考えたい．

### サンプルコードの動き {#sec-exp-OU}

`adaStan()` 関数の挙動を詳しく見るために，次の具体例を考える．

YUIMA を通じて１次元 OU 過程

$$
dX_t=\theta(\mu-X_t)\,dt+\sigma\,dW_t
$$

をシミュレーションをするためには，次のようにモデル定義をする：

```{r}
model <- setModel(drift = "theta*(mu-x)", diffusion = "sigma", state.variable = "x", solve.variable = "x")
```

これだけで，YUIMA は勝手にパラメータを識別してくれる：

```{r}
model@drift
model@diffusion[[1]]
```

これを通じて生成される Stan モデル文は

```stan
data {
  int N;
  vector[N+1] x;
  real T;
  real h;
}

parameters {
  real theta;
  real mu;
  real sigma;
}

model {
  x[1] ~ normal(0,1);
  for(n in 2:(N+1)){
    x[n] ~ normal(x[n-1] + h * theta * (mu - x[n-1]),
                  sqrt(h) * sigma);
  }
}
```

となるべきであるが，実際その通りになる：

```{r}
x <- setYuima(model = model)
stancode <- yuima_to_stan(x)
cat(stancode)
```

### `CmdStanR` による方法

同様のことが `CmdStanR` というパッケージを用いても実行可能である．

`CmdStanR` では一時ファイル上に stan ファイルを作成して，それをコンパイルして実行する．

```{r}
#| output: false
library(cmdstanr)
stan_file_variables <- write_stan_file(stancode)
mod <- cmdstan_model(stan_file_variables)
```

```{r}
mod$print()  # R6 オブジェクトなので $ を用いた method 呼び出しができる
```

この方法ではバイナリファイルを作成・操作することができる．R セッションの終了とともに一時ファイルは削除される．

```{r}
mod$stan_file()
```

### Stan コードのベクトル化

Stan モデルの問題であるが，なるべくベクトル記法を用いた方が，Stan コードの処理（特に自動微分の計算）が速くなる．

```stan
model {
  x[1] ~ normal(0, 1);  // 初期（値の事前）分布
  x[2:(N + 1)] ~ normal(x[1:N] + h * theta * (rep_vector(mu, N) - x[1:N]), sqrt(h) * sigma);  // xの2番目からN+1番目までをベクトル化して定義
}
```

### 一般化ベイズへの拡張

第 [-@sec-adaStan] 節のサンプルコードでは，ひとまず拡散過程のみにターゲットを絞って `adaStan()` を定義した．

ゆくゆくは遷移確率が極めて複雑になるような確率過程に対する推論も考える必要がある．

一方で Stan では `target` 変数を用いて明示的に対数密度を定義することができる．

```stan
target += normal_lpdf(y | mu, sigma);
```

この明示的な記法を用いることで，擬似尤度などを用いた一般化ベイズ推定も実行できる．^[例えば Cox 回帰など．Cox 回帰の Stan での実装は [こちらの記事](https://qiita.com/ssugasawa/items/e0f1ca1e19d23c643679) も参照．]

## Stan インターフェイスの調査

### 我々のインターフェイス

前述の OU 過程 [-@sec-exp-OU]

$$
dX_t=\theta(\mu-X_t)\,dt+\sigma\,dW_t
$$

のモデル `model` に対して `stan` 関数でベイズ推定を実行してみる．パラメータは
$$
\begin{pmatrix}\theta\\\mu\\\sigma\end{pmatrix}
=
\begin{pmatrix}1\\0\\0.5\end{pmatrix}
$$
として YUIMA を用いてシミュレーションをし，そのデータを与えてパラメータが復元できるかをみる．

```{r}
#| output: false
sampling <- setSampling(Initial = 0, Terminal = 3, n = 1000)
yuima <- setYuima(model = model, sampling = sampling)
simulation <- simulate(yuima, true.parameter = c(theta = 1, mu = 0, sigma = 0.5), xinit = rnorm(1))
```

```{r}
# シミュレーション結果
plot(simulation)
```

さて，このシミュレーション結果から，`adaStan()` 関数でパラメータが復元できるかを確認しましょう．

```{r}
#| output: false
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- adaStan(simulation)
```

```{r}
print(fit)
plot(fit)
```

```{r}
#| output: false
library("bayesplot")
library("rstanarm")
library("ggplot2")

posterior <- as.matrix(fit)
plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
```

```{r}
mcmc_areas(posterior,
           pars = c("theta", "mu", "sigma"),
           prob = 0.8) + plot_title
```

$\sigma$ の推定はよくできているが $\mu$ の精度はあまりよくなく，$\theta$ はバイアスがある様で，自信を持って間違えることも多い．

### `brms` パッケージ

[`brms`](https://cran.r-project.org/web/packages/brms/index.html) や `rethinking` も，背後で Stan を利用している．これらが文字式をどのように取り扱っているかを調査する．


::: {#lst-brms}
:::

Stan コードを扱っている関数は [`.stancode()`](https://github.com/paul-buerkner/brms/blob/d42adcd22f5af441870038b1d78ad4d9408f344f/R/stancode.R) であった．

最終的に，[`.compile_model_rstan()`](https://github.com/paul-buerkner/brms/blob/d42adcd22f5af441870038b1d78ad4d9408f344f/R/backends.R#L67) と [`.fit_model_rstan()`](https://github.com/paul-buerkner/brms/blob/d42adcd22f5af441870038b1d78ad4d9408f344f/R/backends.R#L145) が呼ばれるようになっている．

最終的にはこれらの関数も，第 [-@sec-adaStan] 節で用意した我々の実装と同様の要領で `gsub` と `paste0` を使って Stan コードを生成していた．

::: {.callout-caution title="`paste0` と `paste` の違い" collapse="true" icon="false"}

```{r}
# paste0() の使用例
result1 <- paste0("Hello", "world")
print(result1)  # "Helloworld"

# paste() の使用例
result2 <- paste("Hello", "world")
print(result2)  # "Hello world"

result3 <- paste("Hello", "world", sep = "-")
print(result3)  # "Hello-world"
```

:::

### `cmdstanr` パッケージ

`cmdstanr` パッケージは 2020 年に beta 版がリリースされた，大変新しいパッケージである．

`R6` クラスを用いた現代的な実装がなされている．

### `RStanArm` パッケージ

詳しくは次稿参照：

::: {#lst-stan2}
:::

`RStan` と `RStanArm` パッケージでは極めて洗練された方法を持つ．

[`stanmodels.R`](https://github.com/stan-dev/rstanarm/blob/master/R/stanmodels.R) というファイルにおいて，大変洗練された方法で，複数の Stan コードのファイルをコンパイルして，C++ コードへのポインタを格納した [`stanmodel` オブジェクト](https://mc-stan.org/rstan/reference/stanmodel-class.html)を生成している．

Stan コードは [`src/stan_files/`](https://github.com/stan-dev/rstanarm/tree/master/src/stan_files) ディレクトリに，`bernoulli.stan` や `count.stan` など，８つ保存されている．

まず各ファイルに対して [`rstan::stanc()`](https://mc-stan.org/rstan/reference/stanc.html) を呼び出して，Stan コードを C++ コードへのポインタに変換している．この際 `allow_undefined = TRUE` という引数があり，未定義の変数が存在してもエラーは出されず，すぐには実行されない．

このファイルでの出力は `stanmodel` オブジェクトのコンストラクタに渡される．`stanmodels` は `stanmodel` オブジェクトのリストである．`stanmodel` オブジェクトは `mk_cppmodule()` のスロットを持ち，ここから RCpp モジュールが呼び出せる．

このオブジェクトを通じて，[`stan_glm.fit.R`](https://github.com/stan-dev/rstanarm/blob/master/R/stan_glm.fit.R) で，`stanmodel` クラスのオブジェクト `stanfit` （`stanmodels` の適切な要素を用いる）に対して `rstan::sampling()` 関数を呼ぶことで推論が実行される．

```r
if (algorithm == "sampling") {
      sampling_args <- set_sampling_args(
        object = stanfit, 
        prior = prior, 
        user_dots = list(...), 
        user_adapt_delta = adapt_delta, 
        data = standata, 
        pars = pars, 
        show_messages = FALSE)
      stanfit <- do.call(rstan::sampling, sampling_args)
    }
```

この際の `set_sampling_args` 関数によって実行されている引数設定が肝心である

## テンプレート操作

::: {.callout-caution title="R の Expression について" collapse="true" icon="false"}

オブジェクト志向言語ではコード自体もオブジェクトであり，これを R では Expression と呼ぶ．

::: {#lst-R4}
:::

１つのクラスからなるわけではなく，`call`, `symbol`, `constant`, `pairlist` の４つの型からなる．^[[@Wickham2019] [第17章](https://adv-r.hadley.nz/meta-big-picture.html)２節．]

次のような操作ができる^[[@Wickham2019] [第18章](https://adv-r.hadley.nz/expressions.html)]

`rlang::expr` がコンストラクタである：

```{r}
library(rlang)
z <- expr(y <- x*10)
z
```

`expression` オブジェクトは `base::eval()` で評価できる：

```{r}
x <- 4
eval(z)
y
```

`expression` には list のようにアクセス可能である：^[[@Wickham2019] [第17章](https://adv-r.hadley.nz/meta-big-picture.html)２節．]

```{r}
f <- expr(f(x = 1, y = 2))

f$z <- 3
f
```

```{r}
f[[2]] <- NULL
f
```

:::

### `glue` パッケージ

```r
install.packages("glue")
```

`glue` （[CRAN](https://cran.r-project.org/web/packages/glue/index.html), [Docs](https://glue.tidyverse.org/)）パッケージは文字列リテラルを扱うパッケージである．

```{r}
library(glue)
name <- "  Hirofumi\n  Shiba\n"
major <- "Mathematics"
glue::glue('My name is {name}. I study {major}. Nice to meet you!')  # 名前空間の衝突を避けるために :: を使う
```

```{r}
glue::glue(" real {param};", param = yuima@model@parameter@all, .collapse = "\n")
```

これを用いると，`adaStan()` は次のように可読性が高い形で書き直すことができる：

```{r}
yuima_to_stan_glued <- function(yuima) {
  # パラメータの定義部分を作成
  parameters <- glue::glue("real {param};", param = yuima@model@parameter@all)
  parameters <- paste(parameters, collapse = "\n  ")

  # drift と diffusion の式内の 'x' を 'x[n-1]' に置換
  drift <- gsub("x", "x[n-1]", yuima@model@drift)
  diffusion <- gsub("x", "x[n-1]", yuima@model@diffusion[[1]])
  
  # Stanコード全体を作成
  template <- 
'data {{
  int N;
  array[N+1] real x;
  real T;
  real h;
}}
parameters {{
  {parameters}
}}
model {{
  x[1] ~ normal(0, 1);
  for(n in 2:(N+1)) {{
    x[n] ~ normal(x[n-1] + h * {drift}, sqrt(h) * {diffusion});
  }}
}}'
  excode <- glue::glue(template, .trim = FALSE)  # parameters が複数行に渡る場合でも分離して出力しない
  
  return(excode)
}
```

```{r}
yuima_to_stan_glued(yuima)
```

### `whisker` パッケージ

```r
install.packages("whisker")
```

`whisker` パッケージ（[CRAN](https://cran.r-project.org/web/packages/whisker/index.html), [GitHub](https://github.com/edwindj/whisker)）は Web を中心に採用されているテンプレートシステム [`Mustache`](https://en.wikipedia.org/wiki/Mustache_(template_system)) に基づく機能 `whisker.render()` を提供している．

```r
whisker.render(template, data = parent.frame(), partials = list(),
debug = FALSE, strict = TRUE)
```

```{r}
library(whisker)
template <-
'Hello {{name}}
You have just won ${{value}}!
{{#in_ca}}
Well, ${{taxed_value}}, after taxes.
{{/in_ca}}'
data <- list(name = "Hirofumi"
, value = 10000
, taxed_value = 10000 - (10000 * 0.4)
, in_ca = TRUE
)
whisker.render(template, data)
```

`Mustache` の記法は [Manual](https://mustache.github.io/mustache.5.html) を参照．

## 終わりに {.appendix}

* [GPT o1 によるアイデア](https://chatgpt.com/share/66ed138a-dbb0-8008-be8d-441c8be7b8a2)