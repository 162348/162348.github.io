---
title: "R（３）リスト"
author: "司馬博文"
date: 5/7/2021
date-modified: 6/5/2024
categories: [Computation, R]
image: Files/R.png
bibliography: 
    - ../../../assets/2023.bib
    - ../../../assets/2024.bib
csl: ../../../assets/apalike.csl
abstract-title: 概要
abstract: R におけるリストは，独自の index `$` を持った構造体であり，Python の dictionary， Perl の hash table に似ている．$ は S3 の機能で，S4 は @ である．これはリストが本質的に R の実装の深いところに存在するデータ型だからである．
format:
  html:
    code-fold: false
listing: 
  -   id: lst-R
      type: grid
      sort: false
      contents:
          - R0.qmd
          - R1.qmd
          - R2.qmd
          - R4.qmd
          - R5.qmd
          - YUIMA.qmd
      date-format: iso
      fields: [title,image,date,subtitle]
---

{{< include ../../../assets/_preamble.qmd >}}

::: {#lst-R}
:::

## はじめに {.unnumbered}

R における行列 (matrix) は `dim` 属性を持ったベクトルであった．これと同様に，R におけるリストには `names` 属性があり，リストの各内容に名前をつける役割を持つ．そしてこの `names` 属性は`$`を使ってアクセスできる．

R におけるすべてのオブジェクトは `class` 属性を持っている．S3 におけるすべてのオブジェクトは `class` 属性を持つリストとして実装されているためである．オブジェクトが関数に呼ばれた際は，この`class`属性の値を確認して，適切なメソッドが呼ばれる．

::: {.callout-caution title="例" collapse="true"}

```{r}
example_list <- list(a=1,b=2)
class(example_list) <- "my_class"
example_list
```

```{r}
attributes(example_list)
```

:::

## リスト

`R.version`や`hist()`の返り値などは，`breaks`, `counts`オプションを持ったリストである．これは`arrtibutes()`あるいは`str()`あるいは直うち，または`class`毎に誂えられた generic 関数である`print()`や`summary()`で確認できる．

::: {.callout-caution collapse="true" title="例"}

```{r}
attributes(R.version)
```

```{r}
str(R.version)
```

```{r}
summary(R.version)
```

:::

### コンストラクタ

* 構成
    * `list(arg1,arg2,…)`
    * `name=arg1`とすると`[[1]]`ではなく`$name`という名前付きで list にできる．
* 名前
    * `names(list) <- c(“name1”,”name2”)`：後からタグ付けで参照できる．

::: {.callout-caution collapse="true" title="例"}

```{r}
example_list
```

```{r}
example_list[[1]]
```

```{r}
#| error: true
example_list[[a]]
```

```{r}
example_list$a
```

:::

### 参照方法

* `L[[1]]`または`L$name`：要素の参照，次元が違うのに注意．
    * `[1]`が行ベクトルを表す．それが`[[1]]`, `[[2]]`, ......と進んでく．
- `$`で参照した場合は，最初の数文字で予測できれば省略可能．

::: {.callout-caution collapse="true" title="例"}

```{r}
names(example_list) <- c("aaaaa","bbbbb")
```

```{r}
example_list
```

```{r}
example_list$a
```

:::

## データフレーム

各要素がベクトルであるリストのこと．従って明らかに縦にベクトル構造を持つ．対称ではないのは数学と同じ．

### コンストラクタ

* 構成
    * `data.frame(…, colname=vector, …)`
        * 列の名前をつけながら．行の名前のデフォルトは $\N$
        * 行列を引かせても良い．
* 名前
    * `row.names(df) <- vector`：行に名前をつける．
    * `names(df)`：すでについている名前
        * column に時間や変数などの構造化されたデータが来がち．

### 参照方法

::: {.callout-important appearance="simple" title="基本"}

`,` 付きのオブジェクトで言及するとベクトルを得る．ベクトルオブジェクトで言及すると部分フレームを得る．（多分呼ばれてる関数が違う）

:::

* `df[n]`：$n$ 列目を data-frame 列として得る
    * 行列同様，列に対して特別な扱いをしている．
* `df[n,]`：$n$ 行目を data-frame 行として得る．
* `df[,n]`：$n$ 列目を data-frame 行として得る．
* `subset(x)`：切り出して使う．
* `df[-n]`：除外
    * 論理値で指定
* `df$Name`：列の名前で indexing して，必ずベクトルを得る．
- `[,drop=TRUE]`：が隠れているので，これを`FALSE`にして強制的に`df`を返すことができる．
- 列の２番目の index は`c(1,5)`の代わりに`c(Month,Day)`で参照してもよく，`$`の後と同様`””`で String 型にする必要はない．