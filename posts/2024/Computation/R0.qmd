---
title: "R の概観"
author: "司馬 博文"
date: 5/7/2021
date-modified: 6/7/2024
image: https://raw.githubusercontent.com/162348/162348.github.io/main/thumbnail.svg
categories: [Computation, R]
bibliography: 
    - ../../../mathematics.bib
    - ../../../bib.bib
csl: ../../../apa.csl
abstract-title: 概要
abstract: R は統計計算のための言語です．
format:
  html:
    code-fold: false
---

::: {.callout-tip title="リンク集" appearance="simple"}

* [R Manuals (by R Development Core Team)](https://cran.r-project.org/manuals.html)
* [All R Language Documentation](https://rdrr.io/r/)
* [R Language Definition](https://stat.ethz.ch/R-manual/R-devel/doc/manual/R-lang.html)

:::

{{< include ../../../_preamble.qmd >}}

## R の概要

R 言語とは

  * 統計計算のための言語と環境の総称
  * 最新の技術や方法が簡単に導入できることも多い 
      * 新しい技法のデモとして論文でも実装される．
      * Python や Julia と同様．
  * Austria 中心の開発．データの分類・集計・整理の機能は織り込み済み．
      * ニュージーランドのオークランド大学の [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka) と [Robert Clifford Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician)) により作られた
      * BBC のグラフは R で書いている．BBC が R 用のパッケージをリリースしている．

## R のオブジェクト志向構造

### Polymorphism（多態的）なオブジェクト志向

* polymorphic な関数を generic function という．^[`c++`ならば仮想関数という．]
* R では、クラスはオブジェクトに付随する属性として扱われるものの一つであり、リストとして保持される。その「クラス」という付加情報によって，同じ関数名でも挙動が違う，というのが R の関数である．

R の OO システムは３つあり，S3, S4, R5 という．

> S3 implements a style of object oriented programming called **generic-function OO**. This is different to most programming languages, like Java, C++ and C#, which implement **message-passing OO**. In message-passing style, messages (methods) are sent to objects and the object determines which function to call. Typically this object has a special appearance in the method call, usually appearing before the name of the method/message: e.g. canvas.drawRect("blue"). S3 is different. While computations are still carried out via methods, **a special type of function called a generic function decides which method to call**. Methods are defined in the same way as a normal function, but are called in a different way, as we’ll see shortly.

::: {.callout-caution title="S3 について" collapse="true"}

S3クラス（S言語ver.3という意味）
初期のRクラス構造で現在もRの有力なクラスパラダイム．
組み込みクラスのほとんどがS3パラダイム．
1. 全てがリストであり，新たにクラス名属性を持つとクラスになる．
2. method dispatch機能の実装のためにある
    1. 「ジェネリック関数が呼び出された時に，実引数のmodeを見て適切なクラスメソッドに引き渡す機能」があるのでgeneric functionが定義できる．
    2. plot()で適切に動くのも，全てのオブジェクトが密かにクラスが違うからである．ジェネリック関数printの呼び出しprint(lm)はlmクラスのメソッドprint.lm()にディスパッチされる．

実装に使われている関数
* attr()：
* class()：クラス属性のベクトル．ここへ付与する形でS3は実装されている．

それを確認できる関数
* attributes(obj)：$nameや$classなどの属性を格納したlist．
    * 実はリストのtag（$で参照されるやつ）はnamesというattributeである．
    * それに次いで２番目が$classというattributeになる．
    * 通常のlist objectを表示した時，最後の要素がattr(,”class”)となるのは，通常のリストの構造は１列目の要素としたら，２列目の要素ということである．
    * ＃これがリストの多次元入れ子構造．
* unclass(obj)：クラス属性を外せる．lmなど，ほとんどがクラスという属性を持ったlist．
* methods(fun)：generic methodの全てを表示する．
    * *がついているものは，デフォルトのbase名前空間にはない関数．
    * getAnywhere()：あらゆる名前空間からその名前を持つobjectを持ってくる．
    * 標準名前空間にない存在はnamespace:::nameでアクセスできる．
    * methods(,”classname”)と使うと，classnameという名前を持ったクラスにdispatchされているmethodを表示する．

:::

### クラスシステム

* list などはクラスとして実装されていて，`class(object)` で確認できる．
* `mode(object) <- value` は storage mode のこと．
    * `typeof()`を wrap している．
    * `<- value`とできるのは："logical", "integer", "double", "complex", "raw", "character", "list", "expression", "name", "symbol" and "function"
* `typeof(object)`