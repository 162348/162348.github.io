---
title: "Quartoはじめて良かった | Quarto Basics in Japanese"
author: "Hirofumi Shiba"
date: "11/4/2023"
date-modified: "12/11/2023"
categories: [Quarto, Lifestyle]
abstract: Quartoのチュートリアル＋紹介＋おすすめポイント
abstract-title: 概要
toc: true
number-sections: true
website:
    twitter-card: true
code-block-bg: true
code-block-border-left: "#31BAE9"
---

筆者はQuartoを，「TeXにような使用感で数式・コードが併存する文章を書き，RStudioのような使用感でコードの実行やプレゼンができる，等号開発環境」と理解した．
前述のTeX, RStudioに慣れている人にとっては極めて低い限界コストで莫大な利益を得るだろう．

## デモページ

:::{.callout-note}
Note: The followings were pasted from the [official documentation](https://quarto.org/docs/get-started/hello/vscode.html).^[This is footnote. What a great feature!]
:::

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 4 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## 使い方の概要

QuartoではこのようなNotebook-likeなドキュメントが，極めて簡単に＋凡ゆるフォーマットで作成できる．
特にVSCodeの拡張機能と組み合わせれば，`RStudio`のような隙のない統合開発環境が得られる．またVSCodeでは[ビジュアルモードでの編集](https://quarto.org/docs/visual-editor/vscode/)もサポートされており，Jupyter Notebookと全く同じ使用感で始められる．

基本的な仕組みとして，自分で作成するのは `.qmd`ファイルのみである．その後は`quarto render`コマンドにより，コードブロックはJupyterによって処理され，全体はmarkdownに変換され，Pandocによって`pdf`, `html`, `word` など好きな形式に最終出力できる．

拡張機能をオンにしたVSCodeでは`Run Cell`ボタンもあるので，ノートブック全体を毎度ビルドせずとも，コードブロックごとに実行して結果を見ることもできる．`Ctrl+Enter`で１行ごとに実行できる操作感は`RStudio`と同じである．

各ファイルの冒頭にYAML blockを用意することで，ノートブックの詳細を調整できる（参照：[HTML Options](https://quarto.org/docs/reference/formats/html.html)）．

```{YAML}
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---
```

本文はmarkdown記法で書く．数式も使える：
$$\mathrm{P}[|\xi|<t]\le2e^{-\frac{t^2}{2\sigma^2}},\qquad t>0.$$

また，コードブロックにもコメントアウトと接頭辞の組み合わせ`#|`を前につけることでYAMLで指示が出せる（参照：[指示のリスト](https://quarto.org/docs/reference/cells/cells-jupyter.html)）．上のコードブロックには

```{YAML}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"
```

と追加されているために，出力された図にラベリングとキャプションが付いているのである．

## 美点

* レンダリングがとんでもなく速い．体感でTeXの10分の1である．
* それでいて数式とコードブロックを併在させることが出来る．なお，明かにTeXを意識していることがわかる使用感になっているし，[本の作成も可能](https://quarto.org/docs/books/)としている．
* ローカル環境で動く．Jupyter Notebookが続かない筆者にとって，この点は肝要である．
* 私用の勉強ノートとしても使えると同時に，内容そのままブログとして公開できる．
* [プレゼンテーションにも使える](https://quarto.org/docs/presentations/)．
* すごい細かいが，例えば`project type`を`website`としたリポジトリで`quarto render`をしても，不要なファイルが自動で削除される．このような点がライトユーザーでもとにかく使いやすい．
* さらに[インタラクティブな機能](https://quarto.org/docs/interactive/)を実現してみたい．

## Website Hostingのやり方

[公式Guide](https://quarto.org/docs/publishing/github-pages.html)を参考．

### Source Branchを`main`と別ける

まず`gh-pages`という全く新しいブランチを作成する．既存のリポジトリのコミット履歴とは独立している新しいブランチを作るときは`--orphan`オプションが利用される．

```{.bash filename="Terminal"}
git checkout --orphan gh-pages
git reset --hard # make sure all changes are committed before running this!
git commit --allow-empty -m "Initialising gh-pages branch"
git push origin gh-pages
git checkout main
```

基本`gh-pages`ブランチには自分では立ち入らない．

### `Publish`コマンドによるサイトの公開

`main`ブランチにいることを確認して，
```{.bash filename="Terminal"}
quarto publish gh-pages
```
を実行．

GitHubの方の設定**Settings: Pages**で，Sourceを`gh-pages`ブランチの`/(root)`にしていることを確認すれば，これで無事サイトが公開されていることが確認できる．

### GitHub Actionの使用

さらに，ローカル上で`render`するのではなく，コミットする度にGitHub上でレンダリングしてもらえるように自動化することもできる．こうするとスマホからも自分のサイトが更新できる．

まず，GitHubの設定の**Actions**セクションの**Workflow permissions**から，読み書きの権限をGitHub Actionに付与する．

続いて，次の内容のファイルを`.github/workflows/publish.yml`に書き込む：

```{.yml filename=".github/workflows/publish.yml"}
on:
  workflow_dispatch:
  push:
    branches: main

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Render and Publish
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

これで，`main`ブランチにコミットする度に，GitHub上で`render`が実行されることとなる．

## PDFの作り方

LuaLaTeXを利用することで日本語を含んだPDFを作成できる．

```{.qmd filename="report.qmd"}
title: "タイトル"
author: Hirofumi Shiba
date: 2023/12/11
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    include-in-header: 
      - file: ../_preamble.tex
pdf-engine: lualatex
documentclass: ltjsarticle 
```

## スライドの作り方